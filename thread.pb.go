// thread.proto
// implements thread related feature.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: proto/thread.proto

package grpc

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StaredThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *StaredThreadRequest) Reset() {
	*x = StaredThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaredThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaredThreadRequest) ProtoMessage() {}

func (x *StaredThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaredThreadRequest.ProtoReflect.Descriptor instead.
func (*StaredThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{0}
}

func (x *StaredThreadRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type StaredThreadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   uint64            `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Threads []*ThreadResponse `protobuf:"bytes,2,rep,name=Threads,proto3" json:"Threads,omitempty"`
}

func (x *StaredThreadResponse) Reset() {
	*x = StaredThreadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaredThreadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaredThreadResponse) ProtoMessage() {}

func (x *StaredThreadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaredThreadResponse.ProtoReflect.Descriptor instead.
func (*StaredThreadResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{1}
}

func (x *StaredThreadResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StaredThreadResponse) GetThreads() []*ThreadResponse {
	if x != nil {
		return x.Threads
	}
	return nil
}

type FeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *FeedRequest) Reset() {
	*x = FeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedRequest) ProtoMessage() {}

func (x *FeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedRequest.ProtoReflect.Descriptor instead.
func (*FeedRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{2}
}

func (x *FeedRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type FeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threads []*ThreadResponse `protobuf:"bytes,1,rep,name=Threads,proto3" json:"Threads,omitempty"`
}

func (x *FeedResponse) Reset() {
	*x = FeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedResponse) ProtoMessage() {}

func (x *FeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedResponse.ProtoReflect.Descriptor instead.
func (*FeedResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{3}
}

func (x *FeedResponse) GetThreads() []*ThreadResponse {
	if x != nil {
		return x.Threads
	}
	return nil
}

type RecommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *RecommandRequest) Reset() {
	*x = RecommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommandRequest) ProtoMessage() {}

func (x *RecommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommandRequest.ProtoReflect.Descriptor instead.
func (*RecommandRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{4}
}

func (x *RecommandRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type RecommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threads []*ThreadResponse `protobuf:"bytes,1,rep,name=Threads,proto3" json:"Threads,omitempty"`
}

func (x *RecommandResponse) Reset() {
	*x = RecommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommandResponse) ProtoMessage() {}

func (x *RecommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommandResponse.ProtoReflect.Descriptor instead.
func (*RecommandResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{5}
}

func (x *RecommandResponse) GetThreads() []*ThreadResponse {
	if x != nil {
		return x.Threads
	}
	return nil
}

type ThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadID uint64 `protobuf:"varint,1,opt,name=ThreadID,proto3" json:"ThreadID,omitempty"`
	UserID   uint64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Page     uint64 `protobuf:"varint,16,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (x *ThreadRequest) Reset() {
	*x = ThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadRequest) ProtoMessage() {}

func (x *ThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadRequest.ProtoReflect.Descriptor instead.
func (*ThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{6}
}

func (x *ThreadRequest) GetThreadID() uint64 {
	if x != nil {
		return x.ThreadID
	}
	return 0
}

func (x *ThreadRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ThreadRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint64               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Content string               `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Author  *User                `protobuf:"bytes,3,opt,name=Author,proto3" json:"Author,omitempty"`
	ReplyTo uint64               `protobuf:"varint,4,opt,name=ReplyTo,proto3" json:"ReplyTo,omitempty"`
	Time    *timestamp.Timestamp `protobuf:"bytes,5,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{7}
}

func (x *Reply) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Reply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Reply) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Reply) GetReplyTo() uint64 {
	if x != nil {
		return x.ReplyTo
	}
	return 0
}

func (x *Reply) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint64               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Content   string               `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Author    *User                `protobuf:"bytes,3,opt,name=Author,proto3" json:"Author,omitempty"`
	Likes     uint32               `protobuf:"varint,4,opt,name=Likes,proto3" json:"Likes,omitempty"`
	LikedByMe bool                 `protobuf:"varint,5,opt,name=LikedByMe,proto3" json:"LikedByMe,omitempty"`
	Time      *timestamp.Timestamp `protobuf:"bytes,6,opt,name=Time,proto3" json:"Time,omitempty"`
	Replies   []*Reply             `protobuf:"bytes,7,rep,name=Replies,proto3" json:"Replies,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{8}
}

func (x *Comment) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Comment) GetLikes() uint32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *Comment) GetLikedByMe() bool {
	if x != nil {
		return x.LikedByMe
	}
	return false
}

func (x *Comment) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Comment) GetReplies() []*Reply {
	if x != nil {
		return x.Replies
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Bio      string `protobuf:"bytes,3,opt,name=Bio,proto3" json:"Bio,omitempty"`
	IsPro    bool   `protobuf:"varint,4,opt,name=IsPro,proto3" json:"IsPro,omitempty"`
	Avatar   string `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{9}
}

func (x *User) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *User) GetIsPro() bool {
	if x != nil {
		return x.IsPro
	}
	return false
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type ThreadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint64               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title      string               `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Content    string               `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	Author     *User                `protobuf:"bytes,4,opt,name=Author,proto3" json:"Author,omitempty"`
	Likes      uint64               `protobuf:"varint,5,opt,name=Likes,proto3" json:"Likes,omitempty"`
	Stars      uint64               `protobuf:"varint,6,opt,name=Stars,proto3" json:"Stars,omitempty"`
	StaredByMe bool                 `protobuf:"varint,7,opt,name=StaredByMe,proto3" json:"StaredByMe,omitempty"`
	LikedByMe  bool                 `protobuf:"varint,8,opt,name=LikedByMe,proto3" json:"LikedByMe,omitempty"`
	Time       *timestamp.Timestamp `protobuf:"bytes,9,opt,name=Time,proto3" json:"Time,omitempty"`
	Comments   []*Comment           `protobuf:"bytes,10,rep,name=Comments,proto3" json:"Comments,omitempty"`
}

func (x *ThreadResponse) Reset() {
	*x = ThreadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadResponse) ProtoMessage() {}

func (x *ThreadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadResponse.ProtoReflect.Descriptor instead.
func (*ThreadResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{10}
}

func (x *ThreadResponse) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ThreadResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ThreadResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ThreadResponse) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ThreadResponse) GetLikes() uint64 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *ThreadResponse) GetStars() uint64 {
	if x != nil {
		return x.Stars
	}
	return 0
}

func (x *ThreadResponse) GetStaredByMe() bool {
	if x != nil {
		return x.StaredByMe
	}
	return false
}

func (x *ThreadResponse) GetLikedByMe() bool {
	if x != nil {
		return x.LikedByMe
	}
	return false
}

func (x *ThreadResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ThreadResponse) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

type NewThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Author  uint64 `protobuf:"varint,3,opt,name=Author,proto3" json:"Author,omitempty"`
}

func (x *NewThreadRequest) Reset() {
	*x = NewThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewThreadRequest) ProtoMessage() {}

func (x *NewThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewThreadRequest.ProtoReflect.Descriptor instead.
func (*NewThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{11}
}

func (x *NewThreadRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewThreadRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NewThreadRequest) GetAuthor() uint64 {
	if x != nil {
		return x.Author
	}
	return 0
}

type ReplyThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thread  uint64 `protobuf:"varint,1,opt,name=Thread,proto3" json:"Thread,omitempty"`
	Author  uint64 `protobuf:"varint,2,opt,name=Author,proto3" json:"Author,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *ReplyThreadRequest) Reset() {
	*x = ReplyThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyThreadRequest) ProtoMessage() {}

func (x *ReplyThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyThreadRequest.ProtoReflect.Descriptor instead.
func (*ReplyThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{12}
}

func (x *ReplyThreadRequest) GetThread() uint64 {
	if x != nil {
		return x.Thread
	}
	return 0
}

func (x *ReplyThreadRequest) GetAuthor() uint64 {
	if x != nil {
		return x.Author
	}
	return 0
}

func (x *ReplyThreadRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ReplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Author  uint64 `protobuf:"varint,3,opt,name=Author,proto3" json:"Author,omitempty"`
}

func (x *ReplyResponse) Reset() {
	*x = ReplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyResponse) ProtoMessage() {}

func (x *ReplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyResponse.ProtoReflect.Descriptor instead.
func (*ReplyResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{13}
}

func (x *ReplyResponse) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ReplyResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ReplyResponse) GetAuthor() uint64 {
	if x != nil {
		return x.Author
	}
	return 0
}

type DeleteThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadID uint64 `protobuf:"varint,1,opt,name=ThreadID,proto3" json:"ThreadID,omitempty"`
	UserID   uint64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *DeleteThreadRequest) Reset() {
	*x = DeleteThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteThreadRequest) ProtoMessage() {}

func (x *DeleteThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteThreadRequest.ProtoReflect.Descriptor instead.
func (*DeleteThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteThreadRequest) GetThreadID() uint64 {
	if x != nil {
		return x.ThreadID
	}
	return 0
}

func (x *DeleteThreadRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type DeleteThreadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *DeleteThreadResponse) Reset() {
	*x = DeleteThreadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteThreadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteThreadResponse) ProtoMessage() {}

func (x *DeleteThreadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteThreadResponse.ProtoReflect.Descriptor instead.
func (*DeleteThreadResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteThreadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type LikeThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadID uint64 `protobuf:"varint,1,opt,name=ThreadID,proto3" json:"ThreadID,omitempty"`
	Who      uint64 `protobuf:"varint,2,opt,name=Who,proto3" json:"Who,omitempty"`
}

func (x *LikeThreadRequest) Reset() {
	*x = LikeThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeThreadRequest) ProtoMessage() {}

func (x *LikeThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeThreadRequest.ProtoReflect.Descriptor instead.
func (*LikeThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{16}
}

func (x *LikeThreadRequest) GetThreadID() uint64 {
	if x != nil {
		return x.ThreadID
	}
	return 0
}

func (x *LikeThreadRequest) GetWho() uint64 {
	if x != nil {
		return x.Who
	}
	return 0
}

type LikeThreadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *LikeThreadResponse) Reset() {
	*x = LikeThreadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeThreadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeThreadResponse) ProtoMessage() {}

func (x *LikeThreadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeThreadResponse.ProtoReflect.Descriptor instead.
func (*LikeThreadResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{17}
}

func (x *LikeThreadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type StarThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadID uint64 `protobuf:"varint,1,opt,name=ThreadID,proto3" json:"ThreadID,omitempty"`
	Who      uint64 `protobuf:"varint,2,opt,name=Who,proto3" json:"Who,omitempty"`
}

func (x *StarThreadRequest) Reset() {
	*x = StarThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarThreadRequest) ProtoMessage() {}

func (x *StarThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarThreadRequest.ProtoReflect.Descriptor instead.
func (*StarThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{18}
}

func (x *StarThreadRequest) GetThreadID() uint64 {
	if x != nil {
		return x.ThreadID
	}
	return 0
}

func (x *StarThreadRequest) GetWho() uint64 {
	if x != nil {
		return x.Who
	}
	return 0
}

type StarThreadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *StarThreadResponse) Reset() {
	*x = StarThreadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarThreadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarThreadResponse) ProtoMessage() {}

func (x *StarThreadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarThreadResponse.ProtoReflect.Descriptor instead.
func (*StarThreadResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{19}
}

func (x *StarThreadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ThreadSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyWord string `protobuf:"bytes,1,opt,name=KeyWord,proto3" json:"KeyWord,omitempty"`
	Page    uint32 `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
	UserID  int32  `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *ThreadSearchRequest) Reset() {
	*x = ThreadSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadSearchRequest) ProtoMessage() {}

func (x *ThreadSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadSearchRequest.ProtoReflect.Descriptor instead.
func (*ThreadSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{20}
}

func (x *ThreadSearchRequest) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

func (x *ThreadSearchRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ThreadSearchRequest) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type ThreadSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threads []*ThreadResponse `protobuf:"bytes,1,rep,name=Threads,proto3" json:"Threads,omitempty"`
}

func (x *ThreadSearchResponse) Reset() {
	*x = ThreadSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_thread_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadSearchResponse) ProtoMessage() {}

func (x *ThreadSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadSearchResponse.ProtoReflect.Descriptor instead.
func (*ThreadSearchResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{21}
}

func (x *ThreadSearchResponse) GetThreads() []*ThreadResponse {
	if x != nil {
		return x.Threads
	}
	return nil
}

var File_proto_thread_proto protoreflect.FileDescriptor

var file_proto_thread_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x2d, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x61, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x22, 0x25, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x43, 0x0a, 0x0c, 0x46, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x2a,
	0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x11, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x0d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x22, 0xa4, 0x01,
	0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x4d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4c, 0x69,
	0x6b, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x69, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x42, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x50,
	0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0xc3, 0x02, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5a, 0x0a,
	0x10, 0x4e, 0x65, 0x77, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x5e, 0x0a, 0x12, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x0d, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x49, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x4c, 0x69, 0x6b,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x57, 0x68,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x57, 0x68, 0x6f, 0x22, 0x2e, 0x0a, 0x12,
	0x4c, 0x69, 0x6b, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x03, 0x57, 0x68, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x57, 0x68, 0x6f, 0x22,
	0x2e, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x5b, 0x0a, 0x13, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x14,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x32, 0xc4, 0x07, 0x0a, 0x06, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x12,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x09, 0x4e, 0x65, 0x77, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x09,
	0x4c, 0x69, 0x6b, 0x65, 0x54, 0x68, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x68, 0x72, 0x65, 0x64,
	0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x6b,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0c, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x65,
	0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x65,
	0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53,
	0x75, 0x73, 0x65, 0x2d, 0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_thread_proto_rawDescOnce sync.Once
	file_proto_thread_proto_rawDescData = file_proto_thread_proto_rawDesc
)

func file_proto_thread_proto_rawDescGZIP() []byte {
	file_proto_thread_proto_rawDescOnce.Do(func() {
		file_proto_thread_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_thread_proto_rawDescData)
	})
	return file_proto_thread_proto_rawDescData
}

var file_proto_thread_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_thread_proto_goTypes = []interface{}{
	(*StaredThreadRequest)(nil),  // 0: community.StaredThreadRequest
	(*StaredThreadResponse)(nil), // 1: community.StaredThreadResponse
	(*FeedRequest)(nil),          // 2: community.FeedRequest
	(*FeedResponse)(nil),         // 3: community.FeedResponse
	(*RecommandRequest)(nil),     // 4: community.RecommandRequest
	(*RecommandResponse)(nil),    // 5: community.RecommandResponse
	(*ThreadRequest)(nil),        // 6: community.ThreadRequest
	(*Reply)(nil),                // 7: community.Reply
	(*Comment)(nil),              // 8: community.Comment
	(*User)(nil),                 // 9: community.User
	(*ThreadResponse)(nil),       // 10: community.ThreadResponse
	(*NewThreadRequest)(nil),     // 11: community.NewThreadRequest
	(*ReplyThreadRequest)(nil),   // 12: community.ReplyThreadRequest
	(*ReplyResponse)(nil),        // 13: community.ReplyResponse
	(*DeleteThreadRequest)(nil),  // 14: community.DeleteThreadRequest
	(*DeleteThreadResponse)(nil), // 15: community.DeleteThreadResponse
	(*LikeThreadRequest)(nil),    // 16: community.LikeThreadRequest
	(*LikeThreadResponse)(nil),   // 17: community.LikeThreadResponse
	(*StarThreadRequest)(nil),    // 18: community.StarThreadRequest
	(*StarThreadResponse)(nil),   // 19: community.StarThreadResponse
	(*ThreadSearchRequest)(nil),  // 20: community.ThreadSearchRequest
	(*ThreadSearchResponse)(nil), // 21: community.ThreadSearchResponse
	(*timestamp.Timestamp)(nil),  // 22: google.protobuf.Timestamp
}
var file_proto_thread_proto_depIdxs = []int32{
	10, // 0: community.StaredThreadResponse.Threads:type_name -> community.ThreadResponse
	10, // 1: community.FeedResponse.Threads:type_name -> community.ThreadResponse
	10, // 2: community.RecommandResponse.Threads:type_name -> community.ThreadResponse
	9,  // 3: community.Reply.Author:type_name -> community.User
	22, // 4: community.Reply.Time:type_name -> google.protobuf.Timestamp
	9,  // 5: community.Comment.Author:type_name -> community.User
	22, // 6: community.Comment.Time:type_name -> google.protobuf.Timestamp
	7,  // 7: community.Comment.Replies:type_name -> community.Reply
	9,  // 8: community.ThreadResponse.Author:type_name -> community.User
	22, // 9: community.ThreadResponse.Time:type_name -> google.protobuf.Timestamp
	8,  // 10: community.ThreadResponse.Comments:type_name -> community.Comment
	10, // 11: community.ThreadSearchResponse.Threads:type_name -> community.ThreadResponse
	2,  // 12: community.Thread.GetFeed:input_type -> community.FeedRequest
	4,  // 13: community.Thread.GetRecommand:input_type -> community.RecommandRequest
	6,  // 14: community.Thread.GetThread:input_type -> community.ThreadRequest
	6,  // 15: community.Thread.GetReply:input_type -> community.ThreadRequest
	11, // 16: community.Thread.NewThread:input_type -> community.NewThreadRequest
	12, // 17: community.Thread.ReplyThread:input_type -> community.ReplyThreadRequest
	14, // 18: community.Thread.DeleteThread:input_type -> community.DeleteThreadRequest
	16, // 19: community.Thread.LikeThred:input_type -> community.LikeThreadRequest
	18, // 20: community.Thread.StarThread:input_type -> community.StarThreadRequest
	16, // 21: community.Thread.UnlikeThred:input_type -> community.LikeThreadRequest
	18, // 22: community.Thread.UnstarThread:input_type -> community.StarThreadRequest
	0,  // 23: community.Thread.GetStaredThreads:input_type -> community.StaredThreadRequest
	20, // 24: community.Thread.SearchThread:input_type -> community.ThreadSearchRequest
	3,  // 25: community.Thread.GetFeed:output_type -> community.FeedResponse
	5,  // 26: community.Thread.GetRecommand:output_type -> community.RecommandResponse
	10, // 27: community.Thread.GetThread:output_type -> community.ThreadResponse
	10, // 28: community.Thread.GetReply:output_type -> community.ThreadResponse
	10, // 29: community.Thread.NewThread:output_type -> community.ThreadResponse
	13, // 30: community.Thread.ReplyThread:output_type -> community.ReplyResponse
	15, // 31: community.Thread.DeleteThread:output_type -> community.DeleteThreadResponse
	17, // 32: community.Thread.LikeThred:output_type -> community.LikeThreadResponse
	19, // 33: community.Thread.StarThread:output_type -> community.StarThreadResponse
	17, // 34: community.Thread.UnlikeThred:output_type -> community.LikeThreadResponse
	19, // 35: community.Thread.UnstarThread:output_type -> community.StarThreadResponse
	1,  // 36: community.Thread.GetStaredThreads:output_type -> community.StaredThreadResponse
	21, // 37: community.Thread.SearchThread:output_type -> community.ThreadSearchResponse
	25, // [25:38] is the sub-list for method output_type
	12, // [12:25] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_thread_proto_init() }
func file_proto_thread_proto_init() {
	if File_proto_thread_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_thread_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaredThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaredThreadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteThreadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeThreadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarThreadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_thread_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_thread_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_thread_proto_goTypes,
		DependencyIndexes: file_proto_thread_proto_depIdxs,
		MessageInfos:      file_proto_thread_proto_msgTypes,
	}.Build()
	File_proto_thread_proto = out.File
	file_proto_thread_proto_rawDesc = nil
	file_proto_thread_proto_goTypes = nil
	file_proto_thread_proto_depIdxs = nil
}
