// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThreadClient is the client API for Thread service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThreadClient interface {
	GetFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error)
	GetRecommand(ctx context.Context, in *RecommandRequest, opts ...grpc.CallOption) (*RecommandResponse, error)
	GetThread(ctx context.Context, in *ThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error)
	GetReply(ctx context.Context, in *ThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error)
	NewThread(ctx context.Context, in *NewThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error)
	ReplyThread(ctx context.Context, in *ReplyThreadRequest, opts ...grpc.CallOption) (*ReplyResponse, error)
	DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadResponse, error)
	LikeThred(ctx context.Context, in *LikeThreadRequest, opts ...grpc.CallOption) (*LikeThreadResponse, error)
	StarThread(ctx context.Context, in *StarThreadRequest, opts ...grpc.CallOption) (*StarThreadResponse, error)
	UnlikeThred(ctx context.Context, in *LikeThreadRequest, opts ...grpc.CallOption) (*LikeThreadResponse, error)
	UnstarThread(ctx context.Context, in *StarThreadRequest, opts ...grpc.CallOption) (*StarThreadResponse, error)
	GetStaredThreads(ctx context.Context, in *StaredThreadRequest, opts ...grpc.CallOption) (*StaredThreadResponse, error)
	SearchThread(ctx context.Context, in *ThreadSearchRequest, opts ...grpc.CallOption) (*ThreadSearchResponse, error)
}

type threadClient struct {
	cc grpc.ClientConnInterface
}

func NewThreadClient(cc grpc.ClientConnInterface) ThreadClient {
	return &threadClient{cc}
}

func (c *threadClient) GetFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error) {
	out := new(FeedResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/GetFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) GetRecommand(ctx context.Context, in *RecommandRequest, opts ...grpc.CallOption) (*RecommandResponse, error) {
	out := new(RecommandResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/GetRecommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) GetThread(ctx context.Context, in *ThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error) {
	out := new(ThreadResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/GetThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) GetReply(ctx context.Context, in *ThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error) {
	out := new(ThreadResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/GetReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) NewThread(ctx context.Context, in *NewThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error) {
	out := new(ThreadResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/NewThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) ReplyThread(ctx context.Context, in *ReplyThreadRequest, opts ...grpc.CallOption) (*ReplyResponse, error) {
	out := new(ReplyResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/ReplyThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadResponse, error) {
	out := new(DeleteThreadResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/DeleteThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) LikeThred(ctx context.Context, in *LikeThreadRequest, opts ...grpc.CallOption) (*LikeThreadResponse, error) {
	out := new(LikeThreadResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/LikeThred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) StarThread(ctx context.Context, in *StarThreadRequest, opts ...grpc.CallOption) (*StarThreadResponse, error) {
	out := new(StarThreadResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/StarThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) UnlikeThred(ctx context.Context, in *LikeThreadRequest, opts ...grpc.CallOption) (*LikeThreadResponse, error) {
	out := new(LikeThreadResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/UnlikeThred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) UnstarThread(ctx context.Context, in *StarThreadRequest, opts ...grpc.CallOption) (*StarThreadResponse, error) {
	out := new(StarThreadResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/UnstarThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) GetStaredThreads(ctx context.Context, in *StaredThreadRequest, opts ...grpc.CallOption) (*StaredThreadResponse, error) {
	out := new(StaredThreadResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/GetStaredThreads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadClient) SearchThread(ctx context.Context, in *ThreadSearchRequest, opts ...grpc.CallOption) (*ThreadSearchResponse, error) {
	out := new(ThreadSearchResponse)
	err := c.cc.Invoke(ctx, "/community.Thread/SearchThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreadServer is the server API for Thread service.
// All implementations must embed UnimplementedThreadServer
// for forward compatibility
type ThreadServer interface {
	GetFeed(context.Context, *FeedRequest) (*FeedResponse, error)
	GetRecommand(context.Context, *RecommandRequest) (*RecommandResponse, error)
	GetThread(context.Context, *ThreadRequest) (*ThreadResponse, error)
	GetReply(context.Context, *ThreadRequest) (*ThreadResponse, error)
	NewThread(context.Context, *NewThreadRequest) (*ThreadResponse, error)
	ReplyThread(context.Context, *ReplyThreadRequest) (*ReplyResponse, error)
	DeleteThread(context.Context, *DeleteThreadRequest) (*DeleteThreadResponse, error)
	LikeThred(context.Context, *LikeThreadRequest) (*LikeThreadResponse, error)
	StarThread(context.Context, *StarThreadRequest) (*StarThreadResponse, error)
	UnlikeThred(context.Context, *LikeThreadRequest) (*LikeThreadResponse, error)
	UnstarThread(context.Context, *StarThreadRequest) (*StarThreadResponse, error)
	GetStaredThreads(context.Context, *StaredThreadRequest) (*StaredThreadResponse, error)
	SearchThread(context.Context, *ThreadSearchRequest) (*ThreadSearchResponse, error)
	mustEmbedUnimplementedThreadServer()
}

// UnimplementedThreadServer must be embedded to have forward compatible implementations.
type UnimplementedThreadServer struct {
}

func (UnimplementedThreadServer) GetFeed(context.Context, *FeedRequest) (*FeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedThreadServer) GetRecommand(context.Context, *RecommandRequest) (*RecommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommand not implemented")
}
func (UnimplementedThreadServer) GetThread(context.Context, *ThreadRequest) (*ThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (UnimplementedThreadServer) GetReply(context.Context, *ThreadRequest) (*ThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReply not implemented")
}
func (UnimplementedThreadServer) NewThread(context.Context, *NewThreadRequest) (*ThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewThread not implemented")
}
func (UnimplementedThreadServer) ReplyThread(context.Context, *ReplyThreadRequest) (*ReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyThread not implemented")
}
func (UnimplementedThreadServer) DeleteThread(context.Context, *DeleteThreadRequest) (*DeleteThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThread not implemented")
}
func (UnimplementedThreadServer) LikeThred(context.Context, *LikeThreadRequest) (*LikeThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeThred not implemented")
}
func (UnimplementedThreadServer) StarThread(context.Context, *StarThreadRequest) (*StarThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StarThread not implemented")
}
func (UnimplementedThreadServer) UnlikeThred(context.Context, *LikeThreadRequest) (*LikeThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeThred not implemented")
}
func (UnimplementedThreadServer) UnstarThread(context.Context, *StarThreadRequest) (*StarThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnstarThread not implemented")
}
func (UnimplementedThreadServer) GetStaredThreads(context.Context, *StaredThreadRequest) (*StaredThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaredThreads not implemented")
}
func (UnimplementedThreadServer) SearchThread(context.Context, *ThreadSearchRequest) (*ThreadSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchThread not implemented")
}
func (UnimplementedThreadServer) mustEmbedUnimplementedThreadServer() {}

// UnsafeThreadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreadServer will
// result in compilation errors.
type UnsafeThreadServer interface {
	mustEmbedUnimplementedThreadServer()
}

func RegisterThreadServer(s grpc.ServiceRegistrar, srv ThreadServer) {
	s.RegisterService(&Thread_ServiceDesc, srv)
}

func _Thread_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/GetFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).GetFeed(ctx, req.(*FeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_GetRecommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).GetRecommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/GetRecommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).GetRecommand(ctx, req.(*RecommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_GetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/GetThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).GetThread(ctx, req.(*ThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_GetReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).GetReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/GetReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).GetReply(ctx, req.(*ThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_NewThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).NewThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/NewThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).NewThread(ctx, req.(*NewThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_ReplyThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).ReplyThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/ReplyThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).ReplyThread(ctx, req.(*ReplyThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/DeleteThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).DeleteThread(ctx, req.(*DeleteThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_LikeThred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).LikeThred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/LikeThred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).LikeThred(ctx, req.(*LikeThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_StarThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StarThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).StarThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/StarThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).StarThread(ctx, req.(*StarThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_UnlikeThred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).UnlikeThred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/UnlikeThred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).UnlikeThred(ctx, req.(*LikeThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_UnstarThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StarThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).UnstarThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/UnstarThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).UnstarThread(ctx, req.(*StarThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_GetStaredThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaredThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).GetStaredThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/GetStaredThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).GetStaredThreads(ctx, req.(*StaredThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thread_SearchThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServer).SearchThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.Thread/SearchThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServer).SearchThread(ctx, req.(*ThreadSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Thread_ServiceDesc is the grpc.ServiceDesc for Thread service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Thread_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "community.Thread",
	HandlerType: (*ThreadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeed",
			Handler:    _Thread_GetFeed_Handler,
		},
		{
			MethodName: "GetRecommand",
			Handler:    _Thread_GetRecommand_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _Thread_GetThread_Handler,
		},
		{
			MethodName: "GetReply",
			Handler:    _Thread_GetReply_Handler,
		},
		{
			MethodName: "NewThread",
			Handler:    _Thread_NewThread_Handler,
		},
		{
			MethodName: "ReplyThread",
			Handler:    _Thread_ReplyThread_Handler,
		},
		{
			MethodName: "DeleteThread",
			Handler:    _Thread_DeleteThread_Handler,
		},
		{
			MethodName: "LikeThred",
			Handler:    _Thread_LikeThred_Handler,
		},
		{
			MethodName: "StarThread",
			Handler:    _Thread_StarThread_Handler,
		},
		{
			MethodName: "UnlikeThred",
			Handler:    _Thread_UnlikeThred_Handler,
		},
		{
			MethodName: "UnstarThread",
			Handler:    _Thread_UnstarThread_Handler,
		},
		{
			MethodName: "GetStaredThreads",
			Handler:    _Thread_GetStaredThreads_Handler,
		},
		{
			MethodName: "SearchThread",
			Handler:    _Thread_SearchThread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/thread.proto",
}
